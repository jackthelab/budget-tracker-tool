type Query {
    info: String!
    users: [User!]!
    user(id: ID!): User
    transaction(id: ID!): Bucket!
    bucket(id: ID!): Bucket!
  }

  type Mutation {
    signUp(firstName: String!, lastName: String!, email: String!, password: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
    updateUser(id: ID!, firstName: String, lastName: String, email: String): User
    deleteUser(id: ID!): User
    createBucket(name: String!, goalAmount: Float!, currentAmount: Float!, recurring: Boolean, fixed: Boolean): Bucket
    updateBucket(id: ID!, name: String, goalAmount: Float, currentAmount: Float, recurring: Boolean, fixed: Boolean): Bucket
    deleteBucket(id: ID!): String
  }

  type User {
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    buckets: [Bucket!]!
    transactions: [Transaction!]
  }

  type AuthPayload {
    token: String
    user: User
  }

  type Bucket {
    id: ID!
    owner: User!
    name: String!
    goalAmount: Float!
    currentAmount: Float!
    recurring: Boolean
    fixed: Boolean
  }

  type Transaction {
    id: ID!
    owner: User!
  }